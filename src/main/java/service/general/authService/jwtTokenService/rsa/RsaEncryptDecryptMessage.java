package service.general.authService.jwtTokenService.rsa;

import com.nimbusds.jose.JOSEException;
import com.nimbusds.jose.jwk.RSAKey;

import java.text.ParseException;

/**
 * Reads and writes information generated by RSA keys.
 * For generating keys, see RsaKeyGenerator.
 * Note that RSA is for one-way encryption, and the key pair is used for both encryption and decryption.
 * @implNote Coupled with the Nimbus JOSE + JWT library.
 */
public interface RsaEncryptDecryptMessage {

    /**
     * Encrypts a message using the provided public key.
     * @param message the message to encrypt
     * @param rsaKey the public key to use for encryption {@see RsaKeyGenerator}
     * @return the encrypted message
     */
    String encryptMessage(String message, RSAKey rsaKey)
    throws JOSEException;

    /**
     * Decrypts a message using the provided public key.
     * @param message the message to encrypt
     * @param rsaKey the public key to use for encryption {@see RsaKeyGenerator}
     * @return the encrypted message
     */
    String decryptMessage(String message, RSAKey rsaKey)
    throws JOSEException, ParseException;

}
